# -*- coding: utf-8 -*-
"""Diabetes predicter

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XYyHKGePxhp9SXLF4K9FedbQWp3i5Bf7
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabete_dataset=pd.read_csv("/content/diabetes.csv")

pd.read_csv?

diabete_dataset.head()

diabete_dataset.shape

diabete_dataset.describe()

diabete_dataset['Outcome'].value_counts()

diabete_dataset.groupby('Outcome').mean()

D = diabete_dataset.drop(columns = 'Outcome' , axis =1)
E = diabete_dataset['Outcome']

print(D)

print(E)

scale_func=StandardScaler()

scale_func.fit(D)

standard_data=scale_func.transform(D)

print(standard_data)

D = standard_data
E = diabete_dataset['Outcome']

print(D)
print(E)

D_train,D_test,E_train,E_test=train_test_split(D,E, test_size=0.2,stratify=E,random_state=2)

print(D.shape,D_train.shape,D_test.shape)

classify = svm.SVC(kernel = 'linear')

classify.fit(D_train,E_train)

D_train_predict = classify.predict(D_train)
train_accuracy=accuracy_score(D_train_predict,E_train)

print("Accuracy score of the training data : ",train_accuracy)

D_test_predict = classify.predict(D_test)
test_accuracy=accuracy_score(D_test_predict,E_test)

print("Accuracy score of testing data : ",test_accuracy)

input_data = (4,110,92,0,0,37.6,0.191,30)

input_data_numpy = np.asarray(input_data)
input_data_reshape =input_data_numpy.reshape(1,-1)
std_data=scale_func.transform(input_data_reshape)
print(std_data)
prediction = classify.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")